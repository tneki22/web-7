{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\1234\\\\web-7\\\\src\\\\components\\\\CountService.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { getCount, postCount } from \"../services/api\";\n\n// Функциональный компонент для работы с сервисом Count\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CountService = () => {\n  _s();\n  // Состояние для хранения текущего значения счётчика\n  const [count, setCount] = useState(0);\n  // Состояние для хранения введённого пользователем значения инкремента\n  const [increment, setIncrement] = useState(\"\");\n\n  // Хук useEffect срабатывает при первом рендере компонента, вызывая fetchCount\n  useEffect(() => {\n    fetchCount(); // Загружаем текущее значение счётчика\n  }, []); // Пустой массив зависимостей — хук выполнится только при монтировании\n\n  // Асинхронная функция для получения значения счётчика с сервера\n  const fetchCount = async () => {\n    try {\n      const response = await getCount(); // Вызов API для получения данных\n      setCount(parseInt(response, 10)); // Парсим текстовый ответ как число и обновляем состояние\n    } catch (error) {\n      console.error(\"Ошибка при получении счётчика:\", error);\n      alert(\"Не удалось загрузить значение счётчика.\");\n    }\n  };\n\n  // Асинхронная функция для отправки нового значения инкремента на сервер\n  const updateCount = async () => {\n    try {\n      await postCount(increment); // Вызов API для обновления данных\n      fetchCount(); // Обновляем значение счётчика после изменения\n    } catch (error) {\n      console.error(\"Ошибка при обновлении счётчика:\", error);\n      alert(\"Не удалось обновить значение счётчика.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u0421\\u0435\\u0440\\u0432\\u0438\\u0441 Count\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u0422\\u0435\\u043A\\u0443\\u0449\\u0438\\u0439 \\u0441\\u0447\\u0451\\u0442\\u0447\\u0438\\u043A: \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\" // Тип ввода: числовое поле\n      ,\n      value: increment // Текущее значение инкремента\n      ,\n      onChange: e => setIncrement(e.target.value) // Обновляем состояние при вводе\n      ,\n      placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0447\\u0438\\u0441\\u043B\\u043E\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: updateCount,\n      children: \"\\u041E\\u0431\\u043D\\u043E\\u0432\\u0438\\u0442\\u044C \\u0441\\u0447\\u0451\\u0442\\u0447\\u0438\\u043A\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n_s(CountService, \"SuCEv5l/xnCjNEUlY2zK1zGq1Dw=\");\n_c = CountService;\nexport default CountService; // Экспорт компонента для использования в других местах\nvar _c;\n$RefreshReg$(_c, \"CountService\");","map":{"version":3,"names":["React","useState","useEffect","getCount","postCount","jsxDEV","_jsxDEV","CountService","_s","count","setCount","increment","setIncrement","fetchCount","response","parseInt","error","console","alert","updateCount","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/1234/web-7/src/components/CountService.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { getCount, postCount } from \"../services/api\";\r\n\r\n// Функциональный компонент для работы с сервисом Count\r\nconst CountService = () => {\r\n    // Состояние для хранения текущего значения счётчика\r\n    const [count, setCount] = useState(0);\r\n    // Состояние для хранения введённого пользователем значения инкремента\r\n    const [increment, setIncrement] = useState(\"\");\r\n\r\n    // Хук useEffect срабатывает при первом рендере компонента, вызывая fetchCount\r\n    useEffect(() => {\r\n        fetchCount(); // Загружаем текущее значение счётчика\r\n    }, []); // Пустой массив зависимостей — хук выполнится только при монтировании\r\n\r\n    // Асинхронная функция для получения значения счётчика с сервера\r\n    const fetchCount = async () => {\r\n        try {\r\n            const response = await getCount(); // Вызов API для получения данных\r\n            setCount(parseInt(response, 10)); // Парсим текстовый ответ как число и обновляем состояние\r\n        } catch (error) {\r\n            console.error(\"Ошибка при получении счётчика:\", error);\r\n            alert(\"Не удалось загрузить значение счётчика.\");\r\n        }\r\n    };\r\n\r\n    // Асинхронная функция для отправки нового значения инкремента на сервер\r\n    const updateCount = async () => {\r\n        try {\r\n            await postCount(increment); // Вызов API для обновления данных\r\n            fetchCount(); // Обновляем значение счётчика после изменения\r\n        } catch (error) {\r\n            console.error(\"Ошибка при обновлении счётчика:\", error);\r\n            alert(\"Не удалось обновить значение счётчика.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Сервис Count</h2>\r\n            <p>Текущий счётчик: {count}</p>\r\n            {/* Поле ввода для значения инкремента */}\r\n            <input\r\n                type=\"number\" // Тип ввода: числовое поле\r\n                value={increment} // Текущее значение инкремента\r\n                onChange={(e) => setIncrement(e.target.value)} // Обновляем состояние при вводе\r\n                placeholder=\"Введите число\"\r\n            />\r\n            {/* Кнопка для отправки нового значения инкремента */}\r\n            <button onClick={updateCount}>Обновить счётчик</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CountService; // Экспорт компонента для использования в других местах\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,QAAQ,EAAEC,SAAS,QAAQ,iBAAiB;;AAErD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EACrC;EACA,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAE9C;EACAC,SAAS,CAAC,MAAM;IACZW,UAAU,CAAC,CAAC,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,MAAMA,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC3B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMX,QAAQ,CAAC,CAAC,CAAC,CAAC;MACnCO,QAAQ,CAACK,QAAQ,CAACD,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IACtC,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtDE,KAAK,CAAC,yCAAyC,CAAC;IACpD;EACJ,CAAC;;EAED;EACA,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACA,MAAMf,SAAS,CAACO,SAAS,CAAC,CAAC,CAAC;MAC5BE,UAAU,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvDE,KAAK,CAAC,wCAAwC,CAAC;IACnD;EACJ,CAAC;EAED,oBACIZ,OAAA;IAAAc,QAAA,gBACId,OAAA;MAAAc,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBlB,OAAA;MAAAc,QAAA,GAAG,yFAAiB,EAACX,KAAK;IAAA;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE/BlB,OAAA;MACImB,IAAI,EAAC,QAAQ,CAAC;MAAA;MACdC,KAAK,EAAEf,SAAU,CAAC;MAAA;MAClBgB,QAAQ,EAAGC,CAAC,IAAKhB,YAAY,CAACgB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAAC;MAAA;MAC/CI,WAAW,EAAC;IAAe;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC,eAEFlB,OAAA;MAAQyB,OAAO,EAAEZ,WAAY;MAAAC,QAAA,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtD,CAAC;AAEd,CAAC;AAAChB,EAAA,CAhDID,YAAY;AAAAyB,EAAA,GAAZzB,YAAY;AAkDlB,eAAeA,YAAY,CAAC,CAAC;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}